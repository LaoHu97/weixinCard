<template>
  <div>
    <div style="text-align: center;">
      <p>{{storeName}}</p>
    </div>
    <div class="center">
      <div class="keyboard">
        <!-- 自定义输入框 -->
        <div class="input-box" @touchstart.stop="focus">
          <!-- 左侧标签 -->
          <p class="label">{{label}} : </p>
          <!-- 右侧内容 -->
          <div class="content">
            <p class="input">
              <span class="currency" v-show="val">¥</span>
              {{val}}
            </p>
            <p class="placeholder" v-show="val.length === 0">
              {{placeholder}}
            </p>
            <!-- 光标 -->
            <p class="cursor" :style="{visibility: cursor ? 'visible' : 'hidden'}"></p>
          </div>
        </div>
        <!-- 自定义键盘 -->
        <keyboard :show="keyboard" @typing="typing" @complete="blur" />
      </div>
      <div style="text-align:left;background-color: #eee;line-height:45px;padding-left:15px;">选择您的支付方式</div>
    </div>
    <div class="typepay">
      <group>
        <radio :options="radioYi" v-if="typepay=='3'" v-model="formRadioYi" style="text-align:left;font-size:16px;">
        </radio>
        <radio :options="radioAli" v-if="typepay=='2'" v-model="formRadioAli" style="text-align:left;font-size:16px;">
        </radio>
        <radio :options="radioWx" v-if="typepay=='1'" v-model="formRadioWx" style="text-align:left;font-size:16px;">
          <template scope="props" slot="each-item">
            <i v-bind:class="[props.icon]" style="color:#1AAD19;font-size:22px;"></i>
            <span>{{ props.label }}</span>
            <badge :text="discount*10+'折'" v-show="discountShow"></badge>
          </template>
        </radio>
      </group>
    </div>
    <x-dialog v-model="showHideOnBlur" class="dialog-demo">
      <div @click="showHideOnBlur=false" class="title-dialog" style="text-align: right;">
        <i class="fa fa-times fa-lg"></i>
      </div>
      <p>请输入会员卡支付密码</p>
      <h5 style="margin:10px;color:#ccc;">初始密码为“123456”,可前会员卡主页修改</h5>
      <div class="onepx"></div>
      <p style="font-weight:bold">￥{{vals=Math.round(vals*100)/100}}&nbsp;
        <span style="color: rgb(204, 204, 204);text-decoration: line-through;font-size:12px;">{{val}}</span>
      </p>
      <group>
        <x-input placeholder="请输入支付密码" placeholder-align="center" v-model="password" text-align="center" type="password"></x-input>
      </group>
      <form name="form" action="http://www.zhanghui.brcb-test.sunfund.com/gateway" method="post">
        <input type="hidden" name="service_type" />
        <input type="hidden" name="mch_id" />
        <input type="hidden" name="out_trade_no" />
        <input type="hidden" name="total_fee" />
        <input type="hidden" name="subject" />
        <input type="hidden" name="body" />
        <input type="hidden" name="device_info" />
        <input type="hidden" name="spbill_create_ip" />
        <input type="hidden" name="time_start" />
        <input type="hidden" name="time_expire" />
        <input type="hidden" name="notify_url" />
        <input type="hidden" name="callback_url" />
        <!-- <input type="hidden" name="limit_pay" /> -->
        <input type="hidden" name="nonce_str" />
        <input type="hidden" name="sign" />
      </form>
      <box gap="10px 10px">
        <x-button mini type="primary" @click.native="submitFormVIP('top')">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确认支付&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</x-button>
      </box>
      <!-- <box gap="10px 10px">
    <x-button mini @click.native="modifyPassword()">修改密码</x-button>
  </box> -->
    </x-dialog>
    <box gap="10px 10%" style="">
      <x-button type="primary" :show-loading="false" @click.native="submitForm()">确认支付</x-button>
    </box>
  </div>
</template>
<script>
  import Md5 from 'md5'
  import bestPay from '../../static/bestpay.api'
  import {
    Divider,
    Group,
    Cell,
    Popup,
    XInput,
    XButton,
    Box,
    XHeader,
    Radio,
    Loading,
    Toast,
    XDialog,
    Badge,
    TransferDomDirective as TransferDom
  } from 'vux'
  import keyboard from './keyboard'
  export default {
    name: 'KeyboardInput',
    directives: {
      TransferDom
    },
    components: {
      Divider,
      Group,
      Cell,
      Popup,
      XInput,
      XButton,
      Box,
      XHeader,
      Radio,
      Loading,
      Toast,
      XDialog,
      keyboard,
      Badge
    },
    props: {
      value: '',
      inter: {
        default: 5
      },
      decimal: {
        default: 2
      },
      label: {
        default: '消费金额'
      },
      placeholder: {
        default: '询问服务员后输入'
      }
    },
    data() {
      return {
        cursor: false,
        keyboard: false,
        /*value 在组件中的值*/
        val: '', //输入值
        vals: '', //折扣值
        discount: '', //折扣率
        discountShow: true, //是否显示打折
        aIllegal: ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0..', '.'],
        cursorDuration: 600,
        bodyHeight: '',
        bodyOverflow: '',

        storeName: '',
        mid: '',
        eid: '',
        sid: '',
        oid: '',
        typepay: '',
        formRadioAli: '001',
        formRadioWx: '001',
        formRadioYi: '001',
        radioAli: [{
          icon: 'http://weixin.weupay.com/pay/card/common/icon-03.png',
          key: '001',
          value: '支付宝支付',
        }],
        radioWx: [{
          icon: 'fa fa-wechat',
          key: '001',
          labe: '微信',
          value: '微信支付',
        }, {
          icon: 'fa fa-credit-card',
          key: '002',
          labe: '会员卡',
          value: '会员卡支付',
        }],
        radioYi: [{
          icon: 'fa fa-wechat',
          key: '003',
          labe: '翼支付',
          value: '翼支付',
        }],
        //下单数据
        payOpenId: '',
        eid: '',
        adUrl: '',
        adTargetUrl: '',
        //会员卡支付弹窗
        showHideOnBlur: false,
        password: '',
        id: '',
        memId: '',
        pwd: ''
      }
    },
    created() {
      document.addEventListener('touchstart', () => {
        this.blur();
      });
    },
    watch: {
      val: function (val, oldval) {

      }
    },
    methods: {
      /*focus*/
      focus() {
        /*显示键盘*/
        this.showKeyboard();
        /*显示光标*/
        this.showCursor();
        /*闪烁光标*/
        this.blinkCursor();
      },
      blinkCursor() {
        clearInterval(this.intervalID);
        this.intervalID = setInterval(() => {
          this.cursor = !this.cursor;
        }, this.cursorDuration);
      },
      unblinkCursor() {
        clearInterval(this.intervalID);
      },
      /*blur*/
      blur() {
        /*隐藏光标*/
        this.hideCursor();
        /*停止光标闪烁*/
        this.unblinkCursor();
        /*隐藏键盘*/
        this.hideKeyboard();
        /*
          附加 00, 如果用户输入了一个以 . 结尾的值就点完成了,
          那么这个时候就在后面加上00
        */
        this.toCompletion();
        /*通知父组件, 老子值出来了*/
        /*
          校验用户输入的金额是不是为 0, 如果是的话, 直接重置
        */
        this.checkValue();
        this.notify();
      },
      showKeyboard() {
        this.keyboard = true;
      },
      hideKeyboard() {
        this.keyboard = false;
        this.vals = this.val * this.discount; //计算优惠金额
      },
      showCursor() {
        this.cursor = true;
      },
      hideCursor() {
        this.cursor = false;
      },
      checkValue() {
        if (parseFloat(this.val) === 0) {
          this.val = '';
        }
      },
      /*判读是否需要加0*/
      toCompletion() {
        let list = this.val.split('.');
        if (typeof list[1] === 'undefined') {
          if (this.val !== '') {
            this.val = this.val + '.';
            this.completion(this.decimal);
          }
        } else {
          if (list[1].length < this.decimal) {
            this.completion(this.decimal - list[1].length);
          }
        }
      },
      completion(len) {
        let v = '';
        for (let i = 0; i < len; i++) {
          v = v + '0';
        }
        this.val = this.val + v;
      },
      notify() {
        this.$emit('input', this.val);
      },
      del() {
        /*删除值并不会触发值的校验, 所以需要手动再触发一次*/
        this.val = this.val.slice(0, -1);
        this.notify();
      },
      /*输入*/
      typing(value) {
        /*如果是点击删除*/
        if (value === '') {
          this.del();
        }
        /*保存旧的值*/
        let oldValue = this.val;
        /*获取新的值*/
        this.val = this.val + value;
        /*检验新值, 如果没有通过检测, 恢复值*/
        if (!this.passCheck(this.val)) {
          this.val = oldValue;
          return;
        }
        /*为了让外界同步输入, 需要发送事件*/
        this.notify();
      },
      passCheck(val) {
        /*验证规则*/
        let aRules = [
          this.illegalInput,
          this.illegalValue,
          this.accuracy
        ]
        return aRules.every((item) => {
          return item(val);
        });
      },
      illegalInput(val) {
        if (this.aIllegal.indexOf(val) > -1) {
          return false;
        }
        return true;
      },
      /*非法值*/
      illegalValue(val) {
        if (parseFloat(val) != val) {
          return false;
        }
        return true;
      },
      /*验证精度*/
      accuracy(val) {

        let v = val.split('.')
        if (v[0].length > this.inter) {
          return false;
        }
        if (v[1] && (v[1].length) > this.decimal) {
          return false;
        }
        return true;
      },






      
      submitForm: function (position) {
        var that = this;
        // 显示
        that.$vux.loading.show({
          text: '加载中'
        })
        var reg =
          /^(([1-9][0-9]*)|([0]\.[1-9]{1})|([0]\.[1-9][0-9]{1})|([0]\.[0-9][1-9]{1})|([1-9][0-9]*\.\d{0,2}))$/;
        if (this.typepay == '2' && reg.test(this.val)) {
          that.$http({
            method: 'post',
            url: COURSES + '/cashier/getPrepayInfo',
            data: {
              'amount': String(Math.round(this.vals * 100) / 100),
              'discount': String(Math.round((this.val - this.vals) * 100) / 100),
              'mid': this.mid,
              'eid': this.eid,
              'sid': this.sid,
              'oid': this.oid,
              "cardOpenId": JSON.parse(sessionStorage.getItem('cardOpenId')),
              'desc': '',
              'type': '2',
              'scene': 'W'
            }
          }).then(function (res) {
            let {
              status,
              message,
              data
            } = res.data;
            if (res.data.status == 200) {
              if (res.data.data.isBrcb == 'Y') {
                document.forms["form"]["service_type"].value = data.service_type;
                document.forms["form"]["mch_id"].value = data.mch_id;
                document.forms["form"]["out_trade_no"].value = data.out_trade_no;
                document.forms["form"]["total_fee"].value = data.total_fee;
                document.forms["form"]["subject"].value = data.subject;
                document.forms["form"]["body"].value = data.body;
                document.forms["form"]["device_info"].value = data.device_info == undefined ? '' : data.device_info;
                document.forms["form"]["spbill_create_ip"].value = data.spbill_create_ip;
                document.forms["form"]["time_start"].value = data.time_start == undefined ? '' : data.time_start;
                document.forms["form"]["time_expire"].value = data.time_expire == undefined ? '' : data.time_expire;
                document.forms["form"]["notify_url"].value = data.notify_url;
                document.forms["form"]["callback_url"].value = data.callback_url;
                // document.forms["form"]["limit_pay"].value=data.limit_pay==undefined?'':data.limit_pay;
                document.forms["form"]["nonce_str"].value = data.nonce_str;
                document.forms["form"]["sign"].value = data.sign;
                setTimeout(function () {
                  // 隐藏
                  that.$vux.loading.hide()
                  document.forms["form"].submit();
                }, 500);
              } else {
                window.location.href = res.data.data.qrCode;
              }
            }
          });
        } else if (this.typepay == '1' && reg.test(this.val)) {
          if (this.formRadioWx == '001') {
            that.$http({
              method: 'post',
              url: COURSES + '/cashier/getPrepayInfo',
              data: {
                'amount': String(Math.round(this.vals * 100) / 100),
                'discount': String(Math.round((this.val - this.vals) * 100) / 100),
                'mid': this.mid,
                'eid': this.eid,
                'sid': this.sid,
                'oid': this.oid,
                "cardOpenId": JSON.parse(sessionStorage.getItem('cardOpenId')),
                'desc': '',
                'type': '1',
                'scene': 'W'
              }
            }).then(function (data) {
              // 隐藏
              that.$vux.loading.hide()
              if (data.data.status == 200) {
                var out_trade_no = data.data.data.out_trade_no;
                sessionStorage.setItem('out_trade_no', JSON.stringify(out_trade_no));
                var orderType = "";
                sessionStorage.setItem('orderType', JSON.stringify(orderType));
                WeixinJSBridge.invoke('getBrandWCPayRequest', {
                  "appId": data.data.data.appId,
                  "timeStamp": data.data.data.timeStamp,
                  "nonceStr": data.data.data.nonceStr,
                  "package": data.data.data.packages,
                  "signType": data.data.data.signType,
                  "paySign": data.data.data.paySign
                }, function (res) {
                  if (res.err_msg == "get_brand_wcpay_request:ok") {
                    that.$router.push({
                      path: '/commer',
                    });
                  } else if (res.err_msg == "get_brand_wcpay_request:cancel") {
                    that.$vux.toast.show({
                      type: 'cancel',
                      text: '取消支付'
                    })
                  } else {
                    that.$vux.toast.show({
                      type: 'warn',
                      text: '支付失败'
                    })
                  }
                });
              } else {
                that.$vux.toast.show({
                  type: 'warn',
                  text: '下单失败'
                })
              }
            });
          } else {
            that.$http({
              method: 'post',
              url: COURSES + '/cashier/getPayInfoByMemCard',
              data: {
                'amount': String(Math.round(this.vals * 100) / 100),
                'discount': String(Math.round((this.val - this.vals) * 100) / 100),
                'mid': JSON.parse(sessionStorage.getItem('mid')),
                'eid': String(that.eid),
                'sid': String(JSON.parse(sessionStorage.getItem('sid'))),
                "oid": that.payOpenId,
                'cardCode': JSON.parse(sessionStorage.getItem('cardCode')),
                'cardId': JSON.parse(sessionStorage.getItem('cardId')),
                'cardOpenId': JSON.parse(sessionStorage.getItem('cardOpenId')),
                'desc': '',
                'type': '1',
                'scene': 'W',
              }
            }).then(function (res) {
              let {
                status
              } = res.data;
              if (status == 200) {
                that.$vux.loading.hide()
                that.showHideOnBlur = true;
                that.id = res.data.data.transId;
                that.memId = res.data.data.memAccount.member_id;
                that.pwd = res.data.data.checkPw;
                var out_trade_no = res.data.data.out_trade_no;
                sessionStorage.setItem('out_trade_no', JSON.stringify(out_trade_no));
                var orderType = "m";
                sessionStorage.setItem('orderType', JSON.stringify(orderType));
              } else {
                that.$vux.loading.hide();
                that.$vux.toast.show({
                  text: res.data.message,
                  type: "warn"
                })
              }
            });
          }
          //翼支付
        } else if (this.typepay == '3' && reg.test(this.val)) {
          let getProduct = User.getProduct()
          that.$http({
            method: 'post',
            url: COURSES + 'cashier/getPrepayInfo',
            data: {
              'amount': String(Math.round(this.vals * 100) / 100),
              'discount': String(Math.round((this.val - this.vals) * 100) / 100),
              'mid': JSON.parse(sessionStorage.getItem('mid')),
              'eid': String(that.eid),
              'sid': String(JSON.parse(sessionStorage.getItem('sid'))),
              "oid": that.payOpenId,
              'cardCode': JSON.parse(sessionStorage.getItem('cardCode')),
              'cardId': JSON.parse(sessionStorage.getItem('cardId')),
              'cardOpenId': JSON.parse(sessionStorage.getItem('cardOpenId')),
              'desc': '',
              'type': '1',
              'scene': 'W',
              'bestAccount':getProduct,
              'payPhone':getProduct
            }
          }).then(function (res) {
            let {
              status
            } = res.data;
            if (status == 200) {
              var out_trade_no = res.data.data.out_trade_no;
              sessionStorage.setItem('out_trade_no', JSON.stringify(out_trade_no));
              var orderType = "m";
              sessionStorage.setItem('orderType', JSON.stringify(orderType));

              //支付成功的回调函数
              let paySuccess = function () {
                that.$router.push({
                  path: '/commer',
                });
              }
              //支付失败的回调函数
              let payFail = function (res) {
                that.$vux.toast.show({
                  text: '付款失败',
                  type: "warn"
                })
              }
              let payJson = res.data.data.payJson;
              //调起翼支付支付界面
              Payment.onPay(payJson, paySuccess, payFail);
            } else {
              that.$vux.loading.hide();
              that.$vux.toast.show({
                text: res.data.message,
                type: "warn"
              })
            }
          });
        } else {
          // 隐藏
          that.$vux.loading.hide()
          // 显示文字
          that.$vux.toast.text('请输入金额', 'top')
        }
      },
      submitFormVIP() {
        var that = this;
        //显示loading
        that.$vux.loading.show({
          text: '正在支付···'
        })
        that.$http({
          method: 'post',
          url: COURSES + '/cashier/updateMempayInfo',
          data: {
            "id": String(that.id),
            "pwd": Md5(that.password + that.pwd),
            "memId": String(that.memId)
          }
        }).then(function (res) {
          let {
            status,
            message
          } = res.data;
          if (status == 200) {
            that.password = '';
            // 隐藏loading
            that.$vux.loading.hide()
            that.showHideOnBlur = false;
            that.$router.push({
              path: '/commer',
            });
          } else {
            // 隐藏loading
            that.$vux.loading.hide()
            // 显示文字
            that.$vux.toast.text(message, 'top')
          }
        });
      },
    },
    mounted() {
      this.blinkCursor(); //闪烁光标
      this.showKeyboard(); //显示键盘
      function GetQueryString(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var r = window.location.search.substr(1).match(reg); //获取url中"?"符后的字符串并正则匹配
        var context = "";
        if (r != null)
          context = r[2];
        reg = null;
        r = null;
        return context == null || context == "" || context == "undefined" ? "" : context;
      }
      var entType = GetQueryString("entType");
      if (entType == 2) {
        var sid = GetQueryString("sid");
        sessionStorage.setItem('sid', JSON.stringify(sid));
      }
      var mid = GetQueryString("mid");
      sessionStorage.setItem('mid', JSON.stringify(mid));
      var eid = GetQueryString("eid");
      sessionStorage.setItem('eid', JSON.stringify(eid));
      var cardCode = GetQueryString("cardCode");
      sessionStorage.setItem('cardCode', JSON.stringify(cardCode));
      var cardId = GetQueryString("cardId");
      sessionStorage.setItem('cardId', JSON.stringify(cardId));
      var cardOpenId = GetQueryString("cardOpenId");
      sessionStorage.setItem('cardOpenId', JSON.stringify(cardOpenId));
      var type = GetQueryString("type");
      sessionStorage.setItem('type', JSON.stringify(type));
      var entType = GetQueryString("entType");
      sessionStorage.setItem('entType', JSON.stringify(entType));
      var openId = JSON.parse(sessionStorage.getItem('openId'));
      var model = GetQueryString("model");
      var openid = GetQueryString("openid");
      var oid = '';
      if (model == 'FT') {
        oid = openid;
      } else {
        oid = openId;
        var card_Code = '';
        if (openId == null) {
          card_Code = null;
        } else {
          card_Code = '1';
        }
      }
      var openCode = GetQueryString("code");
      var state = GetQueryString("state");
      this.typepay = JSON.parse(sessionStorage.getItem('type'));
      var that = this;
      that.$http({
        method: 'post',
        url: COURSES + '/cashier/getPayMemInfo',
        data: {
          'openCode': openCode,
          'state': state,
          'eid': JSON.parse(sessionStorage.getItem('eid')),
          'mid': JSON.parse(sessionStorage.getItem('mid')),
          'sid': String(JSON.parse(sessionStorage.getItem('sid'))),
          'cardCode': JSON.parse(sessionStorage.getItem('cardCode')),
          "cardOpenId": JSON.parse(sessionStorage.getItem('cardOpenId')),
          "cardId": JSON.parse(sessionStorage.getItem('cardId')),
          'type': JSON.parse(sessionStorage.getItem('type')),
          'scene': 'W',
          'entType': entType,
          'state': '',
          "isInitCode": card_Code,
          'payOpenId': oid,
          'model': model
        }
      }).then(function (data) {
        if (data.data.status == 200) {
          that.storeName = data.data.data.storeName;
          that.mid = data.data.data.mid;
          that.eid = data.data.data.eId;
          that.sid = data.data.data.storeId
          that.oid = data.data.data.payOpenId;
          that.discount = data.data.data.discount;
          //是否显示打折
          if (that.discount == "1") {
            that.discountShow = false;
          };
          var openId = data.data.data.payOpenId;
          sessionStorage.setItem('openId', JSON.stringify(openId));
        }
      });
    }
  }

</script>

<style lang="css">
  .typepay p {
    margin: 0;
  }

  .vux-no-group-title {
    margin-top: 0 !important;
  }

  .keyboard {
    font-family: -apple-system, BlinkMacSystemFont, "PingFang SC", "Helvetica Neue", STHeiti, "Microsoft Yahei", Tahoma, Simsun, sans-serif;
    user-select: none;
    font-size: 16px;
    width: 100%;
  }

  .input-box {
    display: flex;
    align-items: center;
    justify-content: space-between;
    line-height: 24px;
    border-top: 1px solid #eee;
    border-bottom: 1px solid #eee;
    padding: 0 25px;
    background-color: #fff;
  }

  .label {
    color: #333;
  }

  .content {
    display: flex;
  }

  .input {
    font-size: 20px;
    color: #313131;
    height: 24px;
  }

  .cursor {
    background-color: #4788c5;
    width: 2px;
    margin-left: 2px;
  }

  .placeholder {
    color: #ccc;
    line-height: 32px;
  }

  .currency {
    color: #c1c1c1;
  }

</style>
